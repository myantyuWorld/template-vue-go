// Code generated by MockGen. DO NOT EDIT.
// Source: pet_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	infrastructure "api/pkg/infrastructure"
	dbmodel "api/pkg/infrastructure/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPetRepository is a mock of PetRepository interface.
type MockPetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPetRepositoryMockRecorder
}

// MockPetRepositoryMockRecorder is the mock recorder for MockPetRepository.
type MockPetRepositoryMockRecorder struct {
	mock *MockPetRepository
}

// NewMockPetRepository creates a new mock instance.
func NewMockPetRepository(ctrl *gomock.Controller) *MockPetRepository {
	mock := &MockPetRepository{ctrl: ctrl}
	mock.recorder = &MockPetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetRepository) EXPECT() *MockPetRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPetRepository) Get(db *infrastructure.RDB, petId uint64) (*dbmodel.Pets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", db, petId)
	ret0, _ := ret[0].(*dbmodel.Pets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPetRepositoryMockRecorder) Get(db, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPetRepository)(nil).Get), db, petId)
}
