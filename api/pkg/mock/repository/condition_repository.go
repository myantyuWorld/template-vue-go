// Code generated by MockGen. DO NOT EDIT.
// Source: condition_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	infrastructure "api/pkg/infrastructure"
	dbmodel "api/pkg/infrastructure/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConditionRepository is a mock of ConditionRepository interface.
type MockConditionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConditionRepositoryMockRecorder
}

// MockConditionRepositoryMockRecorder is the mock recorder for MockConditionRepository.
type MockConditionRepositoryMockRecorder struct {
	mock *MockConditionRepository
}

// NewMockConditionRepository creates a new mock instance.
func NewMockConditionRepository(ctrl *gomock.Controller) *MockConditionRepository {
	mock := &MockConditionRepository{ctrl: ctrl}
	mock.recorder = &MockConditionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConditionRepository) EXPECT() *MockConditionRepositoryMockRecorder {
	return m.recorder
}

// FindNewest mocks base method.
func (m *MockConditionRepository) FindNewest(db *infrastructure.RDB, petId uint64) (*dbmodel.Conditions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNewest", db, petId)
	ret0, _ := ret[0].(*dbmodel.Conditions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNewest indicates an expected call of FindNewest.
func (mr *MockConditionRepositoryMockRecorder) FindNewest(db, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNewest", reflect.TypeOf((*MockConditionRepository)(nil).FindNewest), db, petId)
}

// Finds mocks base method.
func (m *MockConditionRepository) Finds(db *infrastructure.RDB, petId uint64) ([]*dbmodel.Conditions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finds", db, petId)
	ret0, _ := ret[0].([]*dbmodel.Conditions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finds indicates an expected call of Finds.
func (mr *MockConditionRepositoryMockRecorder) Finds(db, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finds", reflect.TypeOf((*MockConditionRepository)(nil).Finds), db, petId)
}

// Post mocks base method.
func (m *MockConditionRepository) Post(db *infrastructure.RDB, petId uint64, condition *dbmodel.Conditions) (*dbmodel.Conditions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", db, petId, condition)
	ret0, _ := ret[0].(*dbmodel.Conditions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockConditionRepositoryMockRecorder) Post(db, petId, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockConditionRepository)(nil).Post), db, petId, condition)
}
